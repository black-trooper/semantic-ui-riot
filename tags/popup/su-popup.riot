<su-popup>
  <div class="su-popup-target" onmouseover="{ onMouseOver }" onmouseout="{ onMouseOut }">
    <div id="{ su_id }"
      class="ui popup { state.position } { state.dataVariation } transition { state.transitionStatus } { state.nowrap }">
      <div class="header" if="{props.dataTitle}">{props.dataTitle}</div>
      <div class="content"></div>
    </div>
    <slot />
  </div>

  <style>
    :host {
      position: relative;
    }

    .ui.popup {
      position: absolute;
    }

    .ui.popup.nowrap {
      white-space: nowrap;
    }

    .ui.popup.wide {
      width: 350px;
    }

    .ui.popup.very.wide {
      width: 550px;
    }

    .ui.popup.top.left {
      top: auto;
      bottom: 100%;
      left: 1em;
      right: auto;
      margin-left: -1rem;
    }

    .ui.popup.bottom.left {
      top: 100%;
      bottom: auto;
      left: 1em;
      right: auto;
      margin-left: -1rem;
    }

    .ui.popup.top.center {
      top: auto;
      bottom: 100%;
      left: 50%;
      right: auto;
      -webkit-transform: translateX(-50%);
      transform: translateX(-50%);
    }

    .ui.popup.bottom.center {
      top: 100%;
      bottom: auto;
      left: 50%;
      right: auto;
      -webkit-transform: translateX(-50%);
      transform: translateX(-50%);
    }

    .ui.popup.top.center.scale.transition.in,
    .ui.popup.bottom.center.scale.transition.in {
      animation-name: xScaleIn
    }

    .ui.popup.top.right {
      top: auto;
      bottom: 100%;
      left: auto;
      right: 1em;
      margin-right: -1rem;
    }

    .ui.popup.bottom.right {
      top: 100%;
      bottom: auto;
      left: auto;
      right: 1em;
      margin-right: -1rem;
    }

    .ui.popup.left.center {
      left: auto;
      right: 100%;
      top: 50%;
      -webkit-transform: translateY(-50%);
      transform: translateY(-50%);
    }

    .ui.popup.right.center {
      left: 100%;
      right: auto;
      top: 50%;
      -webkit-transform: translateY(-50%);
      transform: translateY(-50%);
    }

    .ui.popup.left.center.scale.transition.in,
    .ui.popup.right.center.scale.transition.in {
      animation-name: yScaleIn
    }

    @-webkit-keyframes xScaleIn {
      0% {
        opacity: 0;
        -webkit-transform: scale(0.8) translateX(-50%);
        transform: scale(0.8) translateX(-50%);
      }

      100% {
        opacity: 1;
        -webkit-transform: scale(1) translateX(-50%);
        transform: scale(1) translateX(-50%);
      }
    }

    @keyframes xScaleIn {
      0% {
        opacity: 0;
        -webkit-transform: scale(0.8) translateX(-50%);
        transform: scale(0.8) translateX(-50%);
      }

      100% {
        opacity: 1;
        -webkit-transform: scale(1) translateX(-50%);
        transform: scale(1) translateX(-50%);
      }
    }

    @-webkit-keyframes yScaleIn {
      0% {
        opacity: 0;
        -webkit-transform: scale(0.8) translateY(-50%);
        transform: scale(0.8) translateY(-50%);
      }

      100% {
        opacity: 1;
        -webkit-transform: scale(1) translateY(-50%);
        transform: scale(1) translateY(-50%);
      }
    }

    @keyframes yScaleIn {
      0% {
        opacity: 0;
        -webkit-transform: scale(0.8) translateY(-50%);
        transform: scale(0.8) translateY(-50%);
      }

      100% {
        opacity: 1;
        -webkit-transform: scale(1) translateY(-50%);
        transform: scale(1) translateY(-50%);
      }
    }
  </style>

  <script>
    let index = 0
    export default {
      state: {
        dataVariation: '',
        content: '',
      },
      onMounted,
      onBeforeUpdate,
      onMouseOver,
      onMouseOut,
    }

    // ===================================================================================
    //                                                                           Lifecycle
    //                                                                           =========
    function onMounted(props, state) {
      this.su_id = `su-popup-${index++}`
      if (props.tooltip) {
        state.content = props.tooltip
      }
      else if (this.$('su-popup-content')) {
        state.content = this.$('su-popup-content').innerHTML
        this.$('.su-popup-target').removeChild(this.$('su-popup-content'))
      }
      this.update()
      this.$('.content').innerHTML = state.content
    }

    function onBeforeUpdate(props, state) {
      state.dataVariation = props.dataVariation || ''
      state.nowrap = state.dataVariation.indexOf('wide') < 0 ? 'nowrap' : ''
      state.position = props.position || 'top left'
    }

    // ===================================================================================
    //                                                                               Event
    //                                                                               =====
    function onMouseOver() {
      this.update({ transitionStatus: 'scale in visible' })
      this.dispatch('mouseover')
    }

    function onMouseOut() {
      this.update({ transitionStatus: 'hidden' })
      this.dispatch('mouseout')
    }
  </script>
</su-popup>