<su-rating class="ui rating { props.class }" value="{ state.value }" changed="{ changed }" id="{ su_id }">
  <i class="icon { item.active ? 'active' : '' } { item.selected ? 'selected' : '' }" each="{ item in state.items }"
    onclick="{ () => onClick(item) }" onmouseover="{ () => onMouseover(item) }" onmouseout="{ onMouseout }"></i>

  <script>
    let index = 0
    export default {
      state: {
        items: [],
        value: null,
        lastValue: null,
        defaultValue: null,
      },
      changed: false,

      onBeforeMount,
      onMounted,
      onBeforeUpdate,
      onClick,
      onMouseover,
      onMouseout,
    }

    // ===================================================================================
    //                                                                           Lifecycle
    //                                                                           =========
    // eslint-disable-next-line no-unused-vars
    function onBeforeMount(props, state) {
      init(this, props.max, props.value)
      this.su_id = `su-rating-${index++}`
      this.obs.on(`${this.su_id}-reset`, () => { reset(this) })
    }

    function onMounted() {
      this.update()
    }

    function onBeforeUpdate(props, state) {
      if (state.lastValue != props.value) {
        state.lastValue = props.value
        state.value = props.value
      }
      this.readOnly = this.root.classList.contains('read-only')
      this.changed = state.value != state.defaultValue
      updateView(this)
    }

    // ===================================================================================
    //                                                                              Events
    //                                                                              ======
    function onClick(target) {
      if (this.readOnly) {
        return
      }
      let valueChanged = false
      let beforeValue
      if (this.state.value != target.value) {
        beforeValue = this.state.value
        valueChanged = true
      }
      this.state.value = target.value
      updateView(this)
      this.update()

      this.dispatch('click', target.value)
      if (valueChanged) {
        this.dispatch('change', { value: this.state.value, beforeValue: beforeValue })
      }
    }

    function onMouseover(target) {
      if (this.readOnly) {
        return
      }
      this.state.items.forEach(item => {
        item.selected = item.value <= target.value
      })
      this.update()
    }

    function onMouseout() {
      if (this.readOnly) {
        return
      }
      this.state.items.forEach(item => {
        item.selected = false
      })
      this.update()
    }

    // ===================================================================================
    //                                                                               Logic
    //                                                                               =====
    function init(tag, max = 5, value = 0) {
      tag.lastValue = value
      tag.state.value = value
      tag.state.defaultValue = value
      tag.state.items.length = 0
      for (let i = 0; i < max; i++) {
        tag.state.items[i] = { value: i + 1, active: false, selected: false }
      }
      updateView(tag)
    }

    function reset(tag) {
      tag.update({
        value: tag.state.defaultValue
      })
    }

    function updateView(tag) {
      tag.state.items.forEach(item => {
        item.active = item.value <= tag.state.value
      })
    }
  </script>
</su-rating>