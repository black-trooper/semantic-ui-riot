<su-modal onclick="{ onClickDimmer }" id="{ su_id }" class="{ modalClass }">
  <div class="ui dimmer modals page transition { state.transition } { dimmerClass }">
    <div class="ui modal transition visible active { modalClass }" onclick="{ onClickModal }">
      <div class="ui header { headerClass }" if="{ header }">
        <i class="icon { header.icon }" if="{ header.icon }"></i>
        { title }
      </div>
      <template if="{ modeless && !basic }">
        <i class="window minimize icon" if="{ minimizable }" onclick="{ onToggleMinimize }"></i>
        <i class="window restore icon" if="{ resizable && maximized }" onclick="{ onToggleSize }"></i>
        <i class="window maximize icon" if="{ resizable && !maximized }" onclick="{ onToggleSize }"></i>
      </template>
      <i class="close icon" if="{ closable && !basic }" onclick="{ onClickHide }"></i>
      <div class="content { contentClass }">
        <slot />
      </div>
      <div class="actions">
        <button each="{ button in buttons }" onclick="{ () => onClickButton(button) }" name="button_{ button.text }" type="button"
          class="ui button { button.type } { button.class }">
          { button.text }
          <i class="icon { button.icon }" if="{ button.icon }"></i>
        </button>
      </div>
    </div>
  </div>
  <a class="ui grey big label unminimize" if="{ minimized }" onclick="{ onToggleMinimize }">
    <i class="angle double up icon"></i>
    { title }
  </a>

  <style>
    .ui.dimmer.visible.transition {
      display: flex !important;
      align-items: center;
      justify-content: center;
    }

    .ui.modal {
      top: auto;
      left: auto;
      position: relative;
      margin: 0 !important;
    }

    .ui.fullscreen.modal {
      left: 0 !important;
    }

    @media only screen and (min-width: 768px) {
      .ui.modal>.close {
        display: none;
      }

      .ui.fullscreen.modal>.close {
        display: inline;
      }
    }

    /* modeless */
    .ui.dimmer.modeless.visible.transition {
      visibility: hidden !important;
      display: block !important;
    }

    .ui.dimmer.modeless>.ui.modal {
      position: absolute;
      right: 0;
      bottom: 0;
    }

    .ui.modal>.restore,
    .ui.modal>.maximize {
      right: 1rem;
    }

    .ui.modal>.minimize {
      right: 4rem;
    }

    .ui.modal>.icon {
      display: inline;
      top: 1.0535rem;
      color: rgba(0, 0, 0, .87);
      cursor: pointer;
      position: absolute;
      z-index: 1;
      opacity: 0.8;
      font-size: 1.25em;
      width: 2.25rem;
      height: 2.25rem;
      padding: 0.625rem 0rem 0rem 0rem;
    }

    .unminimize.label {
      position: fixed;
      right: 0;
      bottom: -6px;
      padding-bottom: 1rem;
      z-index: 1000;
    }
  </style>

  <script>
    export default {
      state: {
        transition: '',
      },
      openning: false,
      closing: false,
      closable: true,
      visible: false,
      minimized: false,
      maximized: true,
      onBeforeUpdate,
      onClickModal,
      onClickButton,
      onClickHide,
      onClickDimmer,
      onToggleSize,
      onToggleMinimize,
    }

    // ===================================================================================
    //                                                                           Lifecycle
    //                                                                           =========
    function onBeforeUpdate(props) {
      this.basic = this.root.classList.contains('basic')

      if (props.modal) {
        this.closable = typeof props.modal.closable === 'undefined' || props.modal.closable
        if (props.modal.header) {
          this.header = props.modal.header
          this.headerClass = props.modal.header.icon ? 'icon' : ''
          this.title = props.modal.header.text ? props.modal.header.text : props.modal.header
        }
        if (props.modal.modeless === true) {
          props.modal.modeless = {}
        }
        if (props.modal.modeless) {
          if (typeof props.modal.modeless.minimize === 'undefined') {
            props.modal.modeless.minimize = true
          }
          if (typeof props.modal.modeless.resize === 'undefined') {
            props.modal.modeless.resize = true
          }
        }

        this.buttons = props.modal.buttons
        this.buttons && this.buttons.forEach(button => {
          const classes = []
          if (button.icon && button.text) classes.push('labeled')
          if (button.icon) classes.push('icon')
          if (this.basic) classes.push('inverted')
          if (button.disabled) classes.push('disabled')
          button.class = classes.join(' ')
        })
      }
      this.modeless = isModeless(this)
      this.modalClass = getModalClass(this)
      this.contentClass = getContentClass(this)
      this.dimmerClass = isDimmerModeless(this) ? 'modeless' : ''
      if (this.modeless) {
        this.minimizable = props.modal.modeless.minimize
        this.resizable = props.modal.modeless.resize
      }

      if (props.show != this.lastShow) {
        this.lastShow = props.show
        if (props.show) {
          show(this)
        } else {
          hide(this)
        }
      }
    }

    // ===================================================================================
    //                                                                              Events
    //                                                                              ======
    function onClickButton(item) {
      this.dispatch(item.action || item.text)
      if (typeof item.closable === 'undefined' || item.closable) {
        hide(this)
      }
    }

    function onClickDimmer() {
      if (this.closable && !this.basic) {
        hide(this)
      }
    }

    function onClickModal(event) {
      event.stopPropagation()
    }

    function onClickHide() {
      hide(this)
    }

    function onToggleSize() {
      this.maximized = !this.maximized
      this.update()
      this.dispatch('toggleSize', this.maximized)
    }

    function onToggleMinimize() {
      this.minimized = !this.minimized
      this.update({
        transition: this.minimized ? '' : 'visible active'
      })
      this.update()
      this.dispatch('toggleMinimize', this.minimized)
    }

    // ===================================================================================
    //                                                                               Logic
    //                                                                               =====
    function show(tag) {
      if (tag.openning || tag.closing || tag.visible) {
        return
      }
      tag.openning = true
      tag.state.transition = 'animating fade in visible'
      tag.dispatch('show')
      tag.update()
      setDefaultFocus(tag)

      setTimeout(() => {
        tag.openning = false
        tag.visible = true
        tag.update({
          transition: 'visible active'
        })
      }, 500)
    }

    function hide(tag) {
      if (tag.openning || tag.closing || !tag.visible) {
        return
      }
      tag.closing = true
      tag.update({
        transition: 'animating fade out visible active'
      })
      tag.dispatch('hide')
      tag.update()

      setTimeout(() => {
        tag.closing = false
        tag.visible = false
        tag.update({
          transition: ''
        })
      }, 300)
    }

    function setDefaultFocus(tag) {
      if (!tag.buttons || tag.buttons.length == 0) {
        return
      }
      if (tag.buttons.some(button => button.default)) {
        const text = tag.buttons.filter(button => button.default)[0].text
        tag.$(`[name='button_${text}']`).focus()
      }
    }

    function getModalClass(tag) {
      if (!tag.maximized && isModeless(tag) && tag.props.modal.modeless.class) {
        return tag.props.modal.modeless.class
      }
      return tag.props.class
    }

    function getContentClass(tag) {
      const classes = []
      if (tag.$('img')) {
        classes.push('image')
      }
      if (tag.root.classList.contains('scrolling') || !tag.maximized && isModeless(tag) && tag.props.modal.modeless.class) {
        classes.push('scrolling')
      }
      return classes.join(' ')
    }

    function isModeless(tag) {
      return !tag.closable && tag.props.modal.modeless
    }

    function isDimmerModeless(tag) {
      return isModeless(tag) && !tag.minimized && !tag.maximized
    }
  </script>
</su-modal>