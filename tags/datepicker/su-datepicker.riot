<su-datepicker value="{ state.value }" formated-value="{ state.formatedValue }" changed="{ changed }" id="{ su_id }">
  <div class="ui { props.popup ? 'dropdown' : '' } { upward ? 'upward' : '' }">
    <div class="ui action input { disabled }" if="{ props.popup }">
      <input type="text" placeholder="{ props.placeholder }" onchange="{ onChangeInput }" tabindex="{ tabIndex }" readonly="{ readOnly }"
      />
      <button class="ui icon button { disabled }" onclick="{ toggle }" onblur="{ onBlur }" type="button">
        <i class="calendar icon"></i>
      </button>
    </div>
    <div class="menu transition { state.transitionStatus }" onmousedown="{ onMouseDown }" onmouseup="{ onMouseUp }"
      onblur="{ onBlur }" tabindex="{ tabIndex }">
      <div class="ui compact segments">
        <div class="ui center aligned secondary segment">
          <div class="ui buttons dp-navigation">
            <button class="icon tiny ui button { disabled } prev" onclick="{ clickPrevious }" type="button">
                <i class="chevron left icon"></i>
              </button>
            <button class="ui button { disabled } month" onclick="{ selectMonth }" type="button">{ getCurrentMonthView() }</button>
            <button class="ui button { disabled } year" onclick="{ selectYear }" type="button">{ getCurrentYear() }</button>
            <button class="icon tiny ui button { disabled } next" onclick="{ clickNext }" type="button">
              <i class="chevron right icon"></i>
            </button>
          </div>
          <div class="dp-wrapper">
            <div each="{week in weekNames}" class="dp-weekday">{ week }</div>
          </div>
        </div>
        <div class="ui center aligned segment" if="{ !yearSelecting && !monthSelecting }">
          <div each="{week in weeks}" class="dp-wrapper">
            <div each="{day in week.days}" class="dp-day">
              <button class="ui button { isToday(day) ? 'today' : ''  } { isActive(day) ? 'primary' : 'non-active' } { day.getMonth() != getCurrentMonth() || disabled ? 'disabled' : '' }"
                onclick="{ () => clickDay(day) }" type="button">{day.getDate()}</button>
            </div>
          </div>
        </div>
        <div class="ui center aligned segment" if="{ !yearSelecting && !monthSelecting }">
          <div class="ui two column grid">
            <div class="column dp-clear">
              <button class="ui icon fluid button { disabled }" onclick="{ clickClear }" type="button"><i class="times icon"></i></button>
            </div>
            <div class="column dp-today">
              <button class="ui icon fluid button { disabled }" onclick="{ clickToday }" type="button"><i class="calendar check icon"></i></button>
            </div>
          </div>
        </div>
        <div class="ui center aligned segment" if="{ monthSelecting }">
          <div each="{ element in state.months }" class="dp-wrapper">
            <div each="{ month in element}" class="dp-month">
              <button class="ui button { disabled }" onclick="{ () => clickMonth(month) }" type="button">{month.label}</button>
            </div>
          </div>
        </div>
        <div class="ui center aligned segment" if="{ yearSelecting }">
          <div each="{ element in state.years }" class="dp-wrapper">
            <div each="{ year in element}" class="dp-month">
              <button class="ui button { disabled }" onclick="{ () =>clickYear(year) }" type="button">{year}</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <style>
    .ui.segment {
      padding-top: 0.5rem;
      padding-bottom: 0.5rem;
    }

    .ui.dropdown .menu {
      display: block;
    }

    .ui.buttons.dp-navigation {
      margin-bottom: 0.4rem;
    }

    .ui.dropdown {
      display: block;
    }

    .dp-wrapper {
      display: flex;
    }

    .dp-day,
    .dp-month {
      cursor: pointer;
    }

    .dp-weekday,
    .dp-day,
    .dp-day .ui.button {
      width: 2.5rem;
    }

    .dp-month,
    .dp-month .ui.button {
      width: 4.375rem;
    }

    .dp-day .ui.button,
    .dp-month .ui.button {
      padding: 0;
      height: 2.5rem;
      font-weight: normal
    }

    .dp-day .ui.button.today {
      font-weight: 700;
    }

    .dp-today .ui.button,
    .dp-clear .ui.button,
    .dp-navigation .ui.button,
    .dp-month .ui.button,
    .dp-day .ui.button.non-active {
      background-color: transparent;
    }

    .dp-today .ui.button:hover,
    .dp-clear .ui.button:hover,
    .dp-navigation .ui.button:hover,
    .dp-month .ui.button:hover,
    .dp-day .ui.button.non-active:hover {
      background-color: #e0e1e2;
    }

    .dp-day .ui.button.disabled {
      pointer-events: all !important;
    }

    .dp-navigation {
      width: 100%;
    }

    .dp-navigation .ui.button {
      width: 20%;
    }

    .dp-navigation .ui.button.year,
    .dp-navigation .ui.button.month {
      width: 30%;
    }
  </style>

  <script>
    let index = 0
    import {
      addDays,
      addMonths,
      format,
      isSameDay,
      isToday,
      parse,
      startOfMonth
    } from 'date-fns'

    export default {
      state: {
        currentDate: null,
        defaultValue: null,
        value: null,
        weeks: [],
      },

      visibleFlg: false,
      itemActivated: false,
      lastValue: null,
      lastPropsValue: null,
      lastCurrentDate: null,
      lastPropsCurrentDate: null,
      yearRange: 20,

      onBeforeMount,
      onMounted,
      onBeforeUpdate,

      clickDay,
      clickMonth,
      clickYear,
      clickPrevious,
      clickNext,
      clickClear,
      clickToday,
      selectMonth,
      selectYear,
      toggle,
      onMouseDown,
      onMouseUp,
      onBlur,
      onChangeInput,

      getCurrentYear,
      getCurrentMonthView,
      getCurrentMonth,
      isActive,
      isToday,
    }

    // tag.mixin('semantic-ui')

    // ===================================================================================
    //                                                                           Lifecycle
    //                                                                           =========
    function onBeforeMount(props, state) {
      this.state.transitionStatus = props.popup ? 'hidden' : 'visible'
      this.weeks = []
      this.pattern = getPattern(this)
      this.locale = getLocale(this)
      this.tabIndex = getTabindex(this)
      this.weekNames = getWeekNames(this)
      this.su_id = `su-datepicker-${index++}`
      this.obs.on(`${this.su_id}-reset`, () => { reset(this) })
    }

    function onMounted(props, state) {
      if (!state.value) {
        state.value = copyDate(props.value)
      }
      if (state.value) {
        state.value = format(copyDate(state.value), 'YYYY-MM-DD')
      }
      state.formatedValue = formatViewDate(this, state.value)
      if (props.popup) {
        this.$('input').value = state.formatedValue
      }
      this.lastValue = copyDate(state.value)
      this.lastPropsValue = copyDate(props.value)

      state.currentDate = copyDate(props.currentDate)
      if (state.value) {
        state.currentDate = copyDate(state.value)
      }
      if (!state.currentDate) {
        state.currentDate = new Date()
      }
      state.months = getMonthes(this)
      if (props.yearRange && !isNaN(props.yearRange) && props.yearRange > 20) {
        this.yearRange = props.yearRange
      }
      if (props.startMode === 'year') {
        this.selectYear()
      }
      state.defaultValue = state.value
      this.update()
      parentUpdate(this)
    }

    function onBeforeUpdate(props, state) {
      this.readOnly = this.root.classList.contains('read-only') ? "read-only" : ''
      this.disabled = this.root.classList.contains('disabled') ? 'disabled' : ''

      let changed = false
      if (!isEqualDay(this.lastValue, state.value)) {
        this.lastValue = copyDate(state.value)
        changed = true
      } else if (this.lastPropsValue !== props.value) {
        state.value = props.value ? format(copyDate(props.value), 'YYYY-MM-DD') : null
        this.lastPropsValue = copyDate(props.value)
        this.lastValue = copyDate(props.value)
        changed = true
      }
      if (changed) {
        state.formatedValue = formatViewDate(this, state.value)
        if (props.popup) {
          this.$('input').value = state.formatedValue
        }
        parentUpdate(this)
      }

      if (changed && state.value) {
        state.currentDate = copyDate(state.value)
      }
      if (!isEqualDay(this.lastPropsCurrentDate, props.currentDate)) {
        state.currentDate = copyDate(props.currentDate)
        this.lastPropsCurrentDate = copyDate(props.currentDate)
      }
      if (!isEqualDay(this.lastCurrentDate, state.currentDate)) {
        this.lastCurrentDate = copyDate(state.currentDate)
        generate(this)
      }
      this.changed = !isEqualDay(state.value, state.defaultValue)
    }

    function reset(tag) {
      tag.state.value = tag.state.defaultValue
      tag.update()
      parentUpdate(tag)
    }

    // ===================================================================================
    //                                                                               Event
    //                                                                               =====
    function selectMonth() {
      this.yearSelecting = false
      this.monthSelecting = !this.monthSelecting
      this.update()
    }

    function selectYear() {
      this.state.years = getYears(this)
      this.monthSelecting = false
      this.yearSelecting = !this.yearSelecting
      this.update()
    }

    function clickDay(day) {
      if (this.readOnly || this.disabled) {
        return
      }
      setDate(this, day)
      this.update()
      parentUpdate(this)
      this.dispatch('click', this.state.value)
    }

    function clickMonth(month) {
      this.state.currentDate.setMonth(month.value)
      this.monthSelecting = false
      this.update()
    }

    function clickYear(year) {
      this.state.currentDate.setYear(year)
      this.selectMonth()
      this.update()
    }

    function clickPrevious() {
      if (this.yearSelecting) {
        this.state.years = addYear(this.state.years, -this.yearRange)
      } else {
        this.monthSelecting = false
        this.state.currentDate = addMonths(this.state.currentDate, -1)
      }
      this.update()
    }

    function clickNext() {
      if (this.yearSelecting) {
        this.state.years = addYear(this.state.years, this.yearRange)
      } else {
        this.monthSelecting = false
        this.state.currentDate = addMonths(this.state.currentDate, 1)
      }
      this.update()
    }

    function clickClear() {
      setDate(this, null)
      this.update()
      parentUpdate(this)
      this.dispatch('clear', this.state.value)
    }

    function clickToday() {
      setDate(this, new Date())
      this.update()
      parentUpdate(this)
      this.dispatch('today', this.state.value)
    }

    // -----------------------------------------------------
    //                                          popup option
    //                                          ------------
    function toggle() {
      if (this.readOnly || this.disabled) {
        return
      }
      if (!this.visibleFlg) {
        if (this.props.startMode === 'year') {
          this.selectYear()
          this.yearSelecting = true
        }
        open(this)
      } else {
        close(this)
      }
      this.update()
    }

    function onMouseDown() {
      this.itemActivated = true
      this.update()
    }

    function onMouseUp() {
      this.itemActivated = false
      this.update()
    }

    function onBlur() {
      if (this.props.popup && !this.itemActivated) {
        close(this)
        this.update()
      }
    }

    function onChangeInput() {
      const value = this.$('input').value ? parse(this.$('input').value.replace(/\//g, '-')) : ''
      if (value != 'Invalid Date') {
        setDate(this, value)
      } else {
        this.$('input').value = this.state.value
      }
      this.update()
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    function getCurrentYear() {
      if (this.state.currentDate) {
        return this.state.currentDate.getFullYear()
      }
    }

    function getCurrentMonthView() {
      if (this.state.currentDate) {
        return format(this.state.currentDate, 'MMM', { locale: this.locale })
      }
    }

    function getCurrentMonth() {
      return this.state.currentDate.getMonth()
    }

    function isActive(date) {
      return isEqualDay(this.state.value, date)
    }

    // ===================================================================================
    //                                                                               Logic
    //                                                                               =====
    function generate(tag) {
      const startDate = startOfMonth(tag.state.currentDate)
      const baseDate = addDays(startDate, - startDate.getDay())
      let i = 0
      tag.weeks = []

      for (let r = 0; r < 6; r++) {
        const days = []
        for (let c = 0; c < 7; c++) {
          days.push(addDays(baseDate, i++))
        }
        tag.weeks.push({ days })
      }
    }

    function addYear(years, range) {
      return years.map(values => {
        values = values.map(value => {
          return value + parseInt(range)
        })
        return values
      })
    }

    function getYears(tag) {
      const rowSize = ((tag.yearRange - tag.yearRange % 4) / 4) + ((tag.yearRange % 4 != 0) ? 1 : 0)
      const years = new Array()
      for (let index = 0; index < rowSize; index++) {
        years.push([])
      }
      for (let index = 0; index < tag.yearRange; index++) {
        years[(index - index % 4) / 4][index % 4] = tag.state.currentDate.getFullYear() + index - ((tag.yearRange - tag.yearRange % 2) / 2 - 1)
      }
      return years
    }

    function getMonthes(tag) {
      const months = [[], [], []]
      const monthNames = range(12).map(month => format(new Date(2018, month, 1), 'MMM', { locale: tag.locale }))
      monthNames.forEach((month, index) => {
        months[(index - index % 4) / 4][index % 4] = {
          label: month,
          value: index
        }
      })
      return months
    }

    function open(tag) {
      tag.upward = isUpward(tag)
      tag.state.transitionStatus = 'visible'
      tag.visibleFlg = true
      tag.state.currentDate = copyDate(tag.props.currentDate)
      if (tag.state.value) {
        tag.state.currentDate = copyDate(tag.state.value)
      }
      if (!tag.state.currentDate) {
        tag.state.currentDate = new Date()
      }
      tag.dispatch('open', tag.state.value)
    }

    function close(tag) {
      tag.state.transitionStatus = 'hidden'
      tag.visibleFlg = false
      tag.dispatch('close', tag.state.value)
    }

    function setDate(tag, date) {
      tag.state.value = date ? format(date, 'YYYY-MM-DD') : null
      if (tag.props.popup) {
        tag.$('input').value = tag.state.value
        close(tag)
      }
      tag.dispatch('change', tag.state.value)
    }

    function isEqualDay(d1, d2) {
      if (d1 == d2) {
        return true
      }
      if (typeof d1 === 'undefined' || typeof d2 === 'undefined' || d1 === null || d2 === null) {
        return false
      }
      return isSameDay(d1, d2)
    }

    function copyDate(date) {
      if (!date) {
        return date
      }
      return parse(date)
    }

    function isUpward(tag) {
      if (tag.props.direction == 'upward') {
        return true
      }
      if (tag.props.direction == 'downward') {
        return false
      }
      const inputField = tag.root.getBoundingClientRect()
      const windowHeight = document.documentElement.offsetHeight || document.body.offsetHeight
      const menuHeight = tag.root.querySelector('.menu').getBoundingClientRect().height
      const above = menuHeight <= inputField.top
      const below = windowHeight >= inputField.top + inputField.height + menuHeight

      if (below) {
        return false
      }
      if (!below && !above) {
        return false
      }
      return true
    }

    function getWeekNames(tag) {
      return range(7, 1).map(day => format(new Date(2018, 6, day), 'dd', { locale: tag.locale }))
    }

    function getTabindex(tag) {
      if (!tag.props.popup) {
        return false
      }
      if (tag.props.tabindex) {
        return tag.props.tabindex
      }
      return 0
    }

    function getPattern(tag) {
      if (tag.props.pattern) {
        return tag.props.pattern
      }
      if (tag.defaultOptions && tag.defaultOptions.pattern) {
        return tag.defaultOptions.pattern
      }
      return 'YYYY-MM-DD'
    }

    function getLocale(tag) {
      if (tag.props.locale) {
        return tag.props.locale
      }
      if (tag.defaultOptions && tag.defaultOptions.locale) {
        return tag.defaultOptions.locale
      }
    }

    function range(size, startAt = 0) {
      return Array.from(Array(size).keys()).map(i => i + startAt)
    }

    function formatViewDate(tag, value) {
      const viewDate = copyDate(value)
      return viewDate ? format(viewDate, tag.pattern, { locale: tag.locale }) : null
    }

    function parentUpdate(tag) {
      tag.obs.trigger(`${tag.props.suParentId}-update`)
    }
  </script>
</su-datepicker>