<su-pagination>
  <div class="ui pagination menu { props.class }">
    <a class="angle icon item { state.activePage <= 1 ? 'disabled' : '' }" onclick="{ event => onClickPage(event,1) }">
      <i aria-hidden='true' class='angle double left icon' />
    </a>
    <a class="angle icon item { state.activePage <= 1 ? 'disabled' : '' }" onclick="{ event => onClickPage(event,state.activePage - 1) }">
      <i class='angle left icon' />
    </a>

    <template each="{ page in state.pages }">
      <!-- <a class="item { page.active ? 'active':''} { page.disabled ? 'disabled icon':''}">
        {page.number}
      </a> -->
      <a class="item" onclick="{ event => onClickPage(event,page.number) }" if="{ !page.active && !page.disabled }">
        { page.number }
      </a>
      <a class="active item" if="{ page.active }">{ page.number }</a>
      <div class="disabled icon item" if="{ page.disabled }">
        <i class='ellipsis horizontal icon' />
      </div>
    </template>

    <a class="angle icon item { state.activePage >= state.totalPage ? 'disabled' : '' }" onclick="{ event => onClickPage(event,state.activePage + 1) }">
      <i class='angle right icon' />
    </a>
    <a class="angle icon item { state.activePage >= state.totalPage ? 'disabled' : '' }" onclick="{ event => onClickPage(event,state.totalPage ) }">
      <i aria-hidden='true' class='angle double right icon' />
    </a>
  </div>

  <script>
    export default {
      state: {
        activePage: 1,
        pages: [],
        totalPage: 1,
      },
      lastpropsTotalPage: null,
      lastpropsActivePage: null,
      lastActivePage: null,

      onMounted,
      onBeforeUpdate,
      onClickPage,
    }


    // ===================================================================================
    //                                                                           Lifecycle
    //                                                                           =========
    function onMounted() {
      this.update({
        pages: []
      })
    }

    function onBeforeUpdate(props, state) {
      let needsRegenerate = false
      if (props.activePage != this.lastpropsActivePage) {
        state.activePage = parseInt(props.activePage || 1)
        this.lastpropsActivePage = state.activePage
        needsRegenerate = true
      }
      if (state.activePage != this.lastActivePage) {
        this.lastActivePage = state.activePage
        needsRegenerate = true
      }
      if (props.totalPage != this.lastpropsTotalPage) {
        state.totalPage = parseInt(props.totalPage || 1)
        this.lastpropsTotalPage = state.totalPage
        needsRegenerate = true
      }

      if (needsRegenerate) {
        generatePagination(this)
      }
    }

    // ===================================================================================
    //                                                                               Event
    //                                                                               =====
    function onClickPage(e, pageNum) {
      e.preventDefault()
      if (pageNum < 1 || pageNum > this.state.totalPage) {
        return
      }
      this.update({
        activePage: pageNum
      })
      this.dispatch('change', pageNum)
    }

    // ===================================================================================
    //                                                                               Logic
    //                                                                               =====
    function generatePagination(tag) {
      tag.state.pages = []
      const activePage = tag.state.activePage
      const totalPage = tag.state.totalPage
      const pageSize = calcPageSize(tag.props.pageSize, totalPage)
      const index = calcIndex(activePage, totalPage, pageSize)

      if (pageSize < 1) {
        tag.update()
        return
      }

      for (let i = 0; i < pageSize; i++) {
        tag.state.pages.push({
          number: i + index,
          active: i + index == activePage,
        })
      }
      tag.state.pages[0].number = 1
      tag.state.pages[pageSize - 1].number = totalPage
      if (pageSize > 1) {
        tag.state.pages[1].disabled = index != 1
      }
      if (pageSize > 2) {
        tag.state.pages[pageSize - 2].disabled = index != totalPage - pageSize + 1
      }

      tag.update()
    }

    function calcPageSize(pageSize = 7, totalPage = 1) {
      pageSize = parseInt(pageSize)
      return pageSize < totalPage ? pageSize : totalPage
    }

    function calcIndex(activePage, totalPage, pageSize) {
      const prevPageSize = (pageSize - pageSize % 2) / 2
      if (activePage + prevPageSize > totalPage) {
        return totalPage - pageSize + 1
      }
      if (activePage > prevPageSize) {
        return activePage - prevPageSize
      }
      return 1
    }
  </script>
</su-pagination>